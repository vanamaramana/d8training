<?php

/**
 * @file
 * Install, update and uninstall functions for the node module.
 */

use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\user\RoleInterface;

/**
 * Implements hook_requirements().
 */
/*function node_requirements($phase) {
  $requirements = array();
  if ($phase === 'runtime') {
    // Only show rebuild button if there are either 0, or 2 or more, rows
    // in the {node_access} table, or if there are modules that
    // implement hook_node_grants().
    $grant_count = \Drupal::entityManager()->getAccessControlHandler('node')->countGrants();
    if ($grant_count != 1 || count(\Drupal::moduleHandler()->getImplementations('node_grants')) > 0) {
      $value = \Drupal::translation()->formatPlural($grant_count, 'One permission in use', '@count permissions in use', array('@count' => $grant_count));
    }
    else {
      $value = t('Disabled');
    }

    $requirements['node_access'] = array(
      'title' => t('Node Access Permissions'),
      'value' => $value,
      'description' => t('If the site is experiencing problems with permissions to content, you may have to rebuild the permissions cache. Rebuilding will remove all privileges to content and replace them with permissions based on the current modules and settings. Rebuilding may take some time if there is a lot of content or complex permission settings. After rebuilding has completed, content will automatically use the new permissions. <a href=":rebuild">Rebuild permissions</a>', array(
        ':rebuild' => \Drupal::url('node.configure_rebuild_confirm'),
      )),
    );
  }
  return $requirements;
}*/

/**
 * Implements hook_schema().
 */
/*function d8_training_schema() {
  $schema['dtraining_form'] = array(
    'description' => 'Custom D8 Training Form',
    'fields' => array(
      'tid' => array(
        'description' => 'The {dtraining_form}.tid this record affects.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => '',
      ),
      'first_name' => array(
        'description' => 'First Name.',
        'type' => 'varchar',
        'length' => 255,
        'default' => '',
      ),
      'last_name' => array(
        'description' => 'Last Name.',
        'type' => 'varchar',
        'length' => 255,
        'default' => '',
      ),
    'primary key' => array('tid')
    )
  );

  return $schema;
}*/

/**
 * Implements hook_install().
 */
/*function node_install() {
  // Enable default permissions for system roles.
  // IMPORTANT: Modules SHOULD NOT automatically grant any user role access
  // permissions in hook_install().
  // However, the 'access content' permission is a very special case, since
  // there is hardly a point in installing the Node module without granting
  // these permissions. Doing so also allows tests to continue to operate as
  // expected without first having to manually grant these default permissions.
  if (\Drupal::moduleHandler()->moduleExists('user')) {
    user_role_grant_permissions(RoleInterface::ANONYMOUS_ID, array('access content'));
    user_role_grant_permissions(RoleInterface::AUTHENTICATED_ID, array('access content'));
  }

  // Populate the node access table.
  db_insert('node_access')
    ->fields(array(
      'nid' => 0,
      'gid' => 0,
      'realm' => 'all',
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
    ))
    ->execute();
}*/

/**
 * Implements hook_uninstall().
 */
/*function node_uninstall() {
  // Delete remaining general module variables.
  \Drupal::state()->delete('node.node_access_needs_rebuild');
}*/
